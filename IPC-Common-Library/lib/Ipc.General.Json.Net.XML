<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ipc.General.Json.Net</name>
    </assembly>
    <members>
        <member name="T:Ipc.General.Json.Net.DictionaryConverter">
            <summary>
            Converts an <see cref="T:System.Enum"/> to and from its name string value.
            </summary>
            <summary>
            Converts an <see cref="T:System.Enum"/> to and from its name string value.
            </summary>
        </member>
        <member name="M:Ipc.General.Json.Net.DictionaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Ipc.General.Json.Net.DictionaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Ipc.General.Json.Net.DictionaryConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Ipc.General.Json.Net.JsonObjectSerializer">
            <summary>
            This class will serialize and deserialize JSON.  The differences between this class
            and MS DataContractJsonSerializer is that it will convert enums to strings and dates to 
            ISO xxxx format which is what is used in XML.  It can also handle Dictionaries and 
            converts those to/from List of KeyValuePair.
            </summary>
        </member>
        <member name="F:Ipc.General.Json.Net.JsonObjectSerializer.SerializationBinder">
            <summary>
            Allows overriding the serialization binder.  Refer to Json.NET documentation for details.
            </summary>
        </member>
        <member name="F:Ipc.General.Json.Net.JsonObjectSerializer.ContractResolver">
            <summary>
            Allows overriding the Contract Resovler.  Refer to Json.NET documentation for details.
            </summary>
        </member>
        <member name="M:Ipc.General.Json.Net.JsonObjectSerializer.SerializeJson(System.Object,System.Boolean)">
            <summary>
            Serializes an object to JSON.
            </summary>
            <param name="graph">Object to serialize</param>
            <param name="addTypeToTopLevel">Adds a $type field to the root object</param>
            <returns></returns>
        </member>
        <member name="M:Ipc.General.Json.Net.JsonObjectSerializer.DeserializeJson``1(System.String)">
            <summary>
            Deserializes a JSON string.
            </summary>
            <typeparam name="T">Type of object expected</typeparam>
            <param name="jsonString">JSON text</param>
            <returns></returns>
        </member>
        <member name="M:Ipc.General.Json.Net.JsonObjectSerializer.DeserializeJson(System.String,System.Type)">
            <summary>
            Deserializes a JSON string.
            </summary>
            <param name="jsonString">JSON text</param>
            <param name="type">type of object expected.  Can be null if the JSON text contains a $type field in the root object.</param>
            <returns></returns>
        </member>
    </members>
</doc>
